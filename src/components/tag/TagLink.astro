---
import { SITE } from "$/config"
import { getEntry } from "astro:content"

interface Props {
  tagId: string
  small?: boolean
  count?: number
}

const { tagId, small, count } = Astro.props

const hue = Math.floor(Math.random() * 360) + "deg"
const href = SITE.base + "/tags/" + tagId
const tag = await getEntry("tag", tagId)
---

<a href={href} class:list={["Tag", { "-small": small }]}>
  <span>{tag!.data.name}</span>
  {count && <span class="count">({count})</span>}
</a>

<style define:vars={{ hue, "dark-twinkle-width": small ? "0.5rem" : "1rem" }}>
  .Tag {
    --twinkle-width: 24%;
    --border-radius: clamp(1.25rem, 1.106rem + 0.616vw, 1.5rem);

    display: inline-flex;
    align-items: baseline;
    justify-content: center;
    gap: 0.25em;
    color: light-dark(var(--slate-600), white);
    background-image: repeating-linear-gradient(
      225deg,
      rgba(191, 228, 255, 0.1) var(--twinkle-width),
      rgba(234, 239, 242, 0.3) 5%,
      rgba(206, 206, 255, 0.6) 55.07%,
      rgba(223, 209, 249, 0.4) 77%,
      rgba(230, 227, 245, 0.1) 93%,
      rgba(234, 239, 242, 0.1) 100%
    );
    filter: hue-rotate(var(--hue));
    text-decoration: none;
    border-bottom-right-radius: var(--border-radius);
    border-top-left-radius: var(--border-radius);
    font-size: clamp(1rem, 0.856rem + 0.616vw, 1.25rem);
    line-height: 1.4;
    padding-inline: 1rem;
    padding-block: 0.25rem;
  }

  :global(.dark) .Tag {
    --twinkle-width: var(--dark-twinkle-width);
    filter: hue-rotate(var(--hue)) saturate(1.5) contrast(1.2);
    mix-blend-mode: hard-light;
  }

  .-small {
    border-bottom-right-radius: 0.75rem;
    border-top-left-radius: 0.75rem;
    font-size: 1rem;
    line-height: 1.5rem;
    padding-inline: 0.5rem;
    padding-block: 0;
  }

  .count {
    font-size: 0.75em;
    font-family: "Oldenburg", serif;
    line-height: 1em;
    color: light-dark(var(--slate-400), var(--slate-300));
  }
</style>
