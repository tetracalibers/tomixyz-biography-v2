---
import WebGLDemoLayout from "$/layouts/webgl-demo.astro"
---

<WebGLDemoLayout title="WebGL2による三角形">
  <canvas id="canvas" width="640" height="480"></canvas>
</WebGLDemoLayout>

<script>
  const canvas = document.querySelector("canvas")
  const gl = canvas!.getContext("webgl2")
  if (!gl) {
    throw new Error("WebGL2 cannot be initialized - Canvas does not support WebGL2")
  }

  // 頂点シェーダ
  const vertexShaderSource = `
attribute vec2 position;
void main() {
  gl_Position = vec4(position, 0.0, 1.0);
}`

  // フラグメントシェーダ
  const fragmentShaderSource = `
void main() {
  gl_FragColor = vec4(1, 0, 0, 1); // 赤
}`

  // シェーダをコンパイル
  function createShader(gl: WebGL2RenderingContext, type: GLenum, source: string) {
    const shader = gl.createShader(type)
    if (!shader) {
      throw new Error("Failed to create shader")
    }
    gl.shaderSource(shader, source)
    gl.compileShader(shader)
    return shader
  }

  const vShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource)
  const fShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource)

  // プログラム作成
  const program = gl.createProgram()
  gl.attachShader(program, vShader)
  gl.attachShader(program, fShader)
  gl.linkProgram(program)
  gl.useProgram(program)

  // 頂点データ
  const vertices = new Float32Array([0, 0.5, -0.5, -0.5, 0.5, -0.5])

  const buffer = gl.createBuffer()
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW)

  const positionLoc = gl.getAttribLocation(program, "position")
  gl.enableVertexAttribArray(positionLoc)
  gl.vertexAttribPointer(positionLoc, 2, gl.FLOAT, false, 0, 0)

  // 描画
  gl.clearColor(0.0, 0.0, 0.0, 1.0)
  gl.clear(gl.COLOR_BUFFER_BIT)
  gl.drawArrays(gl.TRIANGLES, 0, 3)
</script>
