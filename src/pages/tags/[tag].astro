---
import { getCollection, type CollectionEntry } from "astro:content"
import DefaultPageLayout from "$/layouts/default.astro"
import { collectTags, includeTag, tagToSlug } from "$/utils/tag"
import { compareDateForSort } from "$/utils"
import type { GetStaticPaths } from "astro"
import ArticlePreviewList from "$components/preview/tag/ArticlePreviewList.astro"

export const getStaticPaths: GetStaticPaths = async () => {
  const filterPublic = (entry: CollectionEntry<"recipe">) => {
    if (import.meta.env.DEV) return true
    return !entry.data.draft && !entry.data.private
  }

  const projects = await getCollection("project")
  const events = await getCollection("event")
  const recipes = await getCollection("recipe", filterPublic)

  const tags = collectTags(projects, events, recipes).sort((a, b) => a.localeCompare(b))

  return tags.flatMap((tag) => {
    const matchProjects = projects.filter(includeTag(tag)) ?? []
    const matchEvents = events.filter(includeTag(tag)) ?? []
    const matchRecipes = recipes.filter(includeTag(tag)) ?? []

    return {
      params: { tag: tagToSlug(tag) },
      props: {
        tagName: tag,
        articles: [...matchProjects, ...matchEvents, ...matchRecipes].sort(compareDateForSort)
      }
    }
  })
}

interface Props {
  tagName: string
  articles: CollectionEntry<"project" | "event" | "recipe">[]
}

const { articles, tagName } = Astro.props
const { tag } = Astro.params

const title = tagName
const description = `${tagName}を扱った作品や記事`
const meta = {
  ogimage: `/og-image/tags/${tag}.png`
}
---

<DefaultPageLayout content={{ title, description }} meta={{ ...meta }}>
  <ArticlePreviewList entries={articles} />
</DefaultPageLayout>
