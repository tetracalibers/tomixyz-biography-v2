---
import { type CollectionEntry } from "astro:content"
import DefaultPageLayout from "$/layouts/default.astro"
import { compareDateForSort } from "$/utils"
import type { GetStaticPaths } from "astro"
import ArticlePreviewList from "$components/preview/tag/ArticlePreviewList.astro"
import { marked } from "marked"
import { collectTagIds, getRefTagCollection, getAllTagMap, filterByTag } from "$/lib/tag"

export const getStaticPaths: GetStaticPaths = async () => {
  const targets = await getRefTagCollection()
  const tagIds = collectTagIds(targets)

  const allTagMap = await getAllTagMap()

  return tagIds.flatMap((tagId) => {
    const matched = filterByTag(tagId, targets)
    const tag = allTagMap.get(tagId)

    return {
      params: { tag: tagId },
      props: {
        tag: tag!.data,
        articles: matched.sort(compareDateForSort)
      }
    }
  })
}

interface Props {
  tag: CollectionEntry<"tag">["data"]
  articles: CollectionEntry<"project" | "event" | "recipe">[]
}

const { articles, tag } = Astro.props
const { tag: tagId } = Astro.params

const title = tag.name
const description = `${tag.name}を扱った作品や記事`
const meta = {
  ogimage: `/og-image/tags/${tagId}.png`
}

const subtitle = `[${tag.name}](${tag.url})を扱った作品や記事`
---

<DefaultPageLayout content={{ title, description }} meta={{ ...meta }}>
  <Fragment slot="subtitle" set:html={marked.parseInline(subtitle)} />
  <ArticlePreviewList entries={articles} />
</DefaultPageLayout>
